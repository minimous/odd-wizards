generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model mst_users {
  user_address           String  @id
  user_discord_url       String?
  user_twitter_url       String?
  user_image_url         String?
  user_created_date      DateTime?  
  user_total_points      Int?
  user_image_preview     String?
  user_trigger_event     String?
  // Relasi dengan Staker
  mst_staker mst_staker[]
  participant trn_participant[]
}

model mst_project {
  project_id             Int    @id @default(autoincrement())
  project_code           String?
  project_name           String?
  project_description    String?
  project_banner         String?
  project_banner_type    String?
  project_status         String?
  project_is_leaderboard String? @default("N")
  project_icon           String?
  project_profile_image  String?
  project_footer_discord String?
  project_footer_twitter String?
  project_footer_discord_color String?
  project_footer_twitter_color String?
  project_discord_url    String?
  project_twitter_url    String?
  project_seqn           Int?
  project_leaderboard_enddate DateTime?
  project_symbol         String?
  project_symbol_img     String?
  project_chellange_tierrule String?
  project_chellange_periode String?
  project_chellange_note    String?

  stakers mst_staker[]
  rewards mst_reward[]
  collections mst_collection[]
}

model mst_reward {
  reward_id             Int    @id @default(autoincrement())
  reward_project_id     Int?
  reward_name           String?
  reward_image_url      String?
  reward_collection     String?
  reward_token_id       String?
  reward_rank           Int?

  project mst_project? @relation(fields: [reward_project_id], references: [project_id])
}

model mst_collection {
  collection_id          Int     @id @default(autoincrement())
  collection_code        String?
  collection_address     String?
  collection_name        String?
  collection_description String?
  collection_supply      Int?
  collection_image_url   String?
  collection_attr_url    String?
  collection_banner_url  String?
  collection_project_id  Int?
  collection_creator     String?
  collection_creator_name String?
  collection_created_date DateTime?
  collection_royalties   Int?
  collection_chain       String?
  collection_seqn        Int?
  collection_staker_daodao String?
  
  // Relasi dengan Staker
  project mst_project? @relation(fields: [collection_project_id], references: [project_id])
  mst_staker mst_staker[]
  mst_attributes_reward mst_attributes_reward[]
}

model mst_staker {
  staker_id               Int       @id @default(autoincrement())
  staker_address          String?
  staker_collection_id    Int?
  staker_lastclaim_date   DateTime?
  staker_nft_staked       Int?
  created_date            DateTime? @default(now())
  updated_date            DateTime? @updatedAt
  staker_total_points     Int?
  staker_red_flag         String?
  staker_project_id       Int?
  
  projects  mst_project? @relation(fields: [staker_project_id], references: [project_id])
  // Relasi dengan Collection dan Point
  collection mst_collection? @relation(fields: [staker_collection_id], references: [collection_id])
  // Relasi dengan User
  user mst_users? @relation(fields: [staker_address], references: [user_address])
  trn_point  trn_point[]
}

model trn_point {
  point_id            Int       @id @default(autoincrement())
  point_amount        Int?
  point_claim_date    DateTime?
  point_nft_staked    Int?
  point_staker_id     Int?
  
  // Relasi dengan Staker
  staker mst_staker? @relation(fields: [point_staker_id], references: [staker_id])
}

model mst_attributes_reward {
  attr_id             Int       @id @default(autoincrement())
  attr_key            String?
  attr_val            String?
  attr_reward         Int?
  attr_periode        String?
  attr_collection_id  Int?
  collection  mst_collection?  @relation(fields: [attr_collection_id], references: [collection_id])
}

model trn_distribusi_reward {
  distribusi_id           Int       @id @default(autoincrement())
  distribusi_collection   Int?
  distribusi_project_id   Int?
  distribusi_reward       String?
  distribusi_wallet       String?
  distribusi_is_claimed   String?   @default("N")
  distribusi_start        DateTime?
  distribusi_end          DateTime?   
  distribusi_position     Int?
  distribusi_tx_hash      String?
}

model trn_raffle {
  raffle_id           Int       @id @default(autoincrement())
  raffle_start        DateTime?
  raffle_end          DateTime?
  raffle_price        Int?
  raffle_price_type   String?
  raffle_max_ticket   Int?
  raffle_created_by   String?
  raffle_created_date DateTime?
  rewards  mst_raffle_reward[]
  participants trn_participant[]
}

model mst_raffle_reward {
  reward_id           Int       @id @default(autoincrement())
  reward_type         String?
  reward_amount       Int?
  reward_name         String?
  reward_collection   String?
  reward_token_id     String?
  reward_token_img    String?
  reward_win_address  String?
  reward_inject_win_address String?
  reward_raffle_id    Int?
  raffle  trn_raffle?   @relation(fields: [reward_raffle_id], references: [raffle_id])
}

model trn_participant {
  participant_id      Int     @id @default(autoincrement())
  participant_address String?
  participant_amount  Int?
  participant_raffle_id Int?
  participant_created_date DateTime?
  raffle  trn_raffle?   @relation(fields: [participant_raffle_id], references: [raffle_id])
  user    mst_users?    @relation(fields: [participant_address], references: [user_address])
}

model mst_banners {
  banner_id           Int @id @default(autoincrement())
  banner_image        String?
  banner_status       String?
  banner_collection_address String?
  banner_website      String?
  banner_twiter       String?
  banner_discord      String?
  banner_seqn         Int?
  banner_type         String?
}